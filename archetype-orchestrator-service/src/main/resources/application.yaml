server:
  port: 8083
###
spring:
  application:
    name: prototype-orchestrator
  kafka:
    template:
      observation-enabled: true  
  cloud:
    function:
      #definition: supplier;consumer
      definition: processor;processorclient  
    stream:
      #function:
        #definition: processor
      bindings:
        processor-in-0:
          destination: order-created
        processor-out-0:
          destination: order-updated
###########
        processorclient-in-0:
          destination: order-client-created
        processorclient-out-0:
          destination: order-client-updated          
      kafka:
        binder:
          replication-factor: 1
          brokers: ${KAFKA_HOST:localhost}:9092
          enable-observation: true
######
service:
  endpoints:
    inventory: http://localhost:8081
    payment: http://localhost:8082
    keycloack: http://localhost:8092
    clientes: http://localhost:8082

#tracing:
  #url: http://localhost:4318/v1/traces

management:
  tracing:
    sampling:
      probability: 1.0
  #zipkin:
    #tracing:
      #endpoint: http://localhost:4317
  otlp:
    tracing:
      #endpoint: http://localhost:4317
      endpoint: http://localhost:4318
    metrics:
      export:
        url: http://localhost:4318
logging:
    pattern:
      level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'      
    ######old jaeger######
    #opentracing:
      #jaeger:
        #http-sender:
          #url: http://localhost:14268/api/traces
          #url: http://${JAEGER_HOST:localhost}:14268/api/traces
        #enable-b3-propagation: true
    ######old jaeger######   