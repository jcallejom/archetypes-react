version: '3.9'
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=LISTENER_SEVICE://:9092,LISTENER_KAFDROP://kafka:29092
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_SEVICE://localhost:9092,LISTENER_KAFDROP://kafka:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP= LISTENER_SEVICE:PLAINTEXT, LISTENER_KAFDROP:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME= LISTENER_SEVICE
      #- KAFKA_LISTENERS=PLAINTEXT://:9092
      #- KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
##########################################################################     
#kafdrop service
##########################################################################           
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka
      - zookeeper
##########################################################################
  postgres_db:
    container_name: postgresdb
    restart: always
    image: postgres:latest
    ports:
        - 3432:5432
    volumes:
        #allow *.sql, *.sql.gz, or *.sh and is execute only if data directory is empty
        - ./dbfiles:/docker-entrypoint-initdb.d
        - postgres_data:/var/lib/pgsql/data/pgdata
        #- ./../postgres_data:/var/lib/postgresql/data        
        #- /var/lib/postgres_data:/var/lib/postgresql/data
    environment:
        #default postgres super user
        POSTGRES_USER: postgres
         #default passwor for postgres super user, it is only the required envvar for postgres image
        POSTGRES_PASSWORD: postgrespw
        #main database if name is not specific thname of super user is use
        POSTGRES_DB: re2dbc_db

##########################################################################     
#dbeaver service
########################################################################## 
  
  dbeaver:
    image: dbeaver/cloudbeaver
    restart: always
    ports:
      - 8978:8978
    depends_on:
      - postgres_db
      
##########################################################################     
#jaeger service
##########################################################################
  jaeger:
    container_name: jaeger
    image: "jaegertracing/all-in-one:latest" ##1.125
    restart: always
    ports:
        - "16686:16686"
        - "14268:14268"
        - "14250:14250"
        - "4318:4318" 
        - "4317:4317" 
    environment:
        - COLLECTOR_OTLP_ENABLED=true
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:latest
    restart: always
    command: [ "--config=/etc/otelcol-contrib/otel-collector-config.yaml" ]
    volumes:
        #- ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:Z
        - ./docker/collector/otel-collector-config.yaml:/etc/otelcol-contrib/otel-collector-config.yaml:Z
    ports:
        #- "13133:13133" 
        #- "4317:4317" #OTLP gRPC receiver  
        #- "4318:4318"#OTLP http receiver
        - "1888:1888" # pprof extension
        - "8888:8888" # Prometheus metrics exposed by the Collector
        - "8889:8889" # Prometheus exporter metrics
        - "13133:13133" # health_check extension
        - "4317" # OTLP gRPC receiver
        - "4318" # OTLP http receiver
        - "55679:55679" # zpages extension              
    depends_on:
        - jaeger
        - zipkin-all-in-one
        - prometheus
##########################################################################     
#zipkin service
##########################################################################
  zipkin-all-in-one:
      container_name: zipkin
      image: openzipkin/zipkin:latest
      restart: always
      ports:
        - "9411:9411"
##########################################################################
#prometheus service
##########################################################################        
  prometheus:
      container_name: prometheus
      image: prom/prometheus
      volumes:
         - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      command:
         - --config.file=/etc/prometheus/prometheus.yml
         #Necesarias para configuracion con ottel
         - --enable-feature=exemplar-storage
         - --web.enable-remote-write-receiver
      restart: always
      ports:
         - '9090:9090'


  grafana:
      container_name: grafana
      image: grafana/grafana
      volumes:
        - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      restart: always
      ports:
        - "3000:3000"
      depends_on:
        - prometheus
        - jaeger
  prototypebff-service:
      build: ./
      container_name: prototypebff-service
      environment:
         OTEL_TRACES_EXPORTER: "logging"
         OTEL_METRICS_EXPORTER: "logging"
         OTEL_LOGS_EXPORTER: "logging"
      ports:
         - "8080:8080"                           
volumes:
  postgres_data:
     driver: local
        