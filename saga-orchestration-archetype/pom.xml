<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>
    <modules>
        <module>common-vo</module>
		<module>prototypebff-service</module>
		<module>prototype-orchestrator</module>
		<module>command-payment-service</module>
		<module>command-inventory-service</module>
	</modules>
    <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.archetype.architectural</groupId>
	<artifactId>saga-orchestration-archetype</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>${project.groupId}:${project.artifactId}</name>
	<description>Archetype project for saga-orchestration</description>

	<properties>
		<java.version>17</java.version>
		<!-- https://github.com/spring-cloud/spring-cloud-release/wiki/Supported-Versions-->
		<spring-cloud.version>2023.0.2</spring-cloud.version>
		<jaeger.version>1.0.3</jaeger.version>
        <jaeger-cloud.version>3.3.1</jaeger-cloud.version>

	</properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
           <dependency>
                <groupId>com.archetype.architectural</groupId>
                <artifactId>common-vo</artifactId>
                <version>0.0.1-SNAPSHOT</version>
            </dependency>
        <!-- Dependencia de jaeger web spring 2.7.x-,van fuera 
         <dependency>
             <groupId>io.opentracing.contrib</groupId>
             <artifactId>opentracing-spring-jaeger-web-starter</artifactId>
             <version>${jaeger.version}</version>
         </dependency>-->
        <!-- Dependencia de jaeger cloud spring 2.7.x ,van fuera
         <dependency>
             <groupId>io.opentracing.contrib</groupId>
             <artifactId>opentracing-spring-jaeger-cloud-starter</artifactId>
             <version>${jaeger-cloud.version}</version>
         </dependency> -->
         
         <!-- Java agente opentelemetry springboot-->  
         
             <dependency>
                <groupId>io.opentelemetry.instrumentation</groupId>
                <artifactId>opentelemetry-instrumentation-bom</artifactId>
                <version>2.8.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
             <!-- Java agente opentelemetry springboot--> 
        </dependencies>
    </dependencyManagement>
    
       
	<dependencies>
    <!-- Dependencia de zipkin spring 3.0.x 
       <dependency>
           <groupId>io.micrometer</groupId>
           <artifactId>micrometer-tracing-bridge-brave</artifactId>
       </dependency>
       
              <dependency>
                 <groupId>io.zipkin.reporter2</groupId>
                 <artifactId>zipkin-reporter-brave</artifactId>
              </dependency>	 -->
       <!--        
       <dependency>
         <groupId>io.opentelemetry</groupId>
         <artifactId>opentelemetry-exporter-zipkin</artifactId>
       </dependency>-->
	 <!-- Dependencia de jaeger cloud OpenTelemetry With OTLP spring 3.0.x 
       <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-tracing-bridge-otel</artifactId>
      </dependency>
      <dependency>
         <groupId>io.opentelemetry</groupId>
         <artifactId>opentelemetry-exporter-otlp</artifactId>
      </dependency>-->
    <!--sol hace falta para otell  sino no llega 
     <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-otlp</artifactId>
         <scope>runtime</scope>
      </dependency>     -->
     
      <!-- Java agente opentelemetry springboot--> 
        <dependency>
          <groupId>io.opentelemetry.instrumentation</groupId>
          <artifactId>opentelemetry-spring-boot-starter</artifactId>
        </dependency>
        <!-- por defecto runtime los queemos en compli para codigojava filtros-->
   
      <!-- Java agente opentelemetry springboot--> 
      
    <!--    Java agente opentelemetry 2 
        <dependency>
           <groupId>io.opentelemetry.javaagent</groupId>
           <artifactId>opentelemetry-javaagent</artifactId>
           <version>2.10.0</version> 
          <!-  <version>1.22.1</version> ->
           <scope>runtime</scope>
        </dependency> --> 
           <!--
      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>1.43.0</version>
        <type>pom</type>

      </dependency>
        -->
        <!-- fundamental para el bean GlobalOpenTelemetry.get()
            <dependency>
              <groupId>io.opentelemetry</groupId>
              <artifactId>opentelemetry-api</artifactId>
            </dependency>-->
           <dependency>
                <groupId>io.opentelemetry.contrib</groupId>
                <artifactId>opentelemetry-samplers</artifactId>
                <version>1.40.0-alpha</version>
            </dependency>

        <!-- Java agente opentelemetry--> 
        
       
        <!-- prometheus  posible cambio a registry-otlp  -->
        <dependency>
             <groupId>io.micrometer</groupId>
             <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
              
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-test-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	
		<!--
           <dependency>
          <groupId>org.springdoc</groupId>
          <artifactId>springdoc-openapi-starter-webflux-api</artifactId>
          <version>2.5.0</version>
        </dependency>
                  <dependency>
              <groupId>org.springdoc</groupId>
              <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
              <version>2.2.0</version>
          </dependency> 
       -->    		
	</dependencies>

	

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			                <!-- Build Docker image 
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.13</version>
                    <executions>
                        <execution>                        
                            <id>build-docker-image</id>
                            <phase>package</phase>
                            <goals>                                              
                                <goal>build</goal>
                 
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <repository>${project.artifactId}</repository>
                        <tag>${project.version}</tag>
                          <buildArgs>
                                 <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>
                    </configuration>
                </plugin>-->
		</plugins>
	</build>

</project>
